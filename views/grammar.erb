<script type="text/javascript" src="path-to-mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
</script>
<script type="text/javascript"
  src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<br>
Recuerde que un PEG $G$ es una cuaterna $G =(\Sigma,V,P,S)$.
<ol>
  <li>$\Sigma$ es el conjunto de terminales. 
  <li>$V$ es un conjunto (disjunto de $\Sigma$) que se denomina conjunto de 
      <i>símbolos no terminales</i>,
      <i>variables sintácticas</i> o <i>categorías gramáticales</i>,
  <li>$P$ es un conjunto de pares de $V \times (V \cup \Sigma )^*$. En vez de escribir
  un par usando la notación $(A, \alpha) \in P$ se escribe $A \leftarrow \alpha$.
  Un elemento de $P$ se denomina <i>regla de análisis</i>. 
  <li>Por último, $S$ es un símbolo del conjunto
  $V$ que se denomina <i>expresión de arranque</i>.
</ol>
<ol>
  <li> $\Sigma = \{ if, then, else, =, +, -, *, /, (, ), 0 \ldots 9 \}$, 
  <li> $V = \{ st, exp, term, factor \} \cup$ <br />
  $\{ADD, MUL, COND, LEFTPAR, RIGHTPAR, PTOCOMA, COMA, PTO, CALL, BEGIN\} \cup$ <br />
  $\{END, PROCEDURE, CONST, VAR, IF, THEN, ELSE, WHILE, DO, ODD, ID\}$
  <li> Reglas de Análisis:
  <ol>
<pre>
prog = (block) + PTO 

block = CONST (cons) + PTOCOMA
        / VAR (var) + PTOCOMA
        / (proc)* st 

cons = ID ASSIGN NUMBER (COMA ID ASSIGN NUMBER)* PTOCOMA


var = ID (COMA ID)* PTOCOMA
           
proc = p:(PROCEDURE ID args? PTOCOMA block PTOCOMA)*
           
args = LEFTPAR ID (COMA ID)* RIGHTPAR
       
st = ID ASSIGN (exp)
     / CALL ID (args)?
     / BEGIN (st) (PTOCOMA st)* END
     / IF (cond) THEN (st) ELSE (st)
     / IF (cond) THEN (st)
     / WHILE (cond) DO (st)

cond = ODD (exp)
       / (exp) COND (exp)
       
exp = (term) (ADD term)*
term = (factor) (MUL factor)* 

factor = NUMBER
       / ID
       / LEFTPAR (exp) RIGHTPAR

_ = $[ \t\n\r]*

ASSIGN = _ op:'=' _ 
ADD = _ op:[+-] _ 
MUL = _ op:[*/] _ 
COND = _ op:$([<>=!][=]/[<>]) _ 
LEFTPAR = _"("_
RIGHTPAR = _")"_
PTOCOMA = _";"_
COMA = _","_
PTO = _"."_
CALL = _ "call" _
BEGIN = _ "begin" _
END = _ "end" _
PROCEDURE = _ "procedure" _
CONST = _ "const" _
VAR = _ "var" _
IF = _ "if" _
THEN = _ "then" _
ELSE = _ "else" _
WHILE = _ "while" _
DO = _ "do" _
ODD = _ "odd" _
ID = _ id:$([a-zA-Z_][a-zA-Z_0-9]*) _
NUMBER = _ digits:$[0-9]+ _

</pre>
  </ol>
  <li> Expresión de arranque: $prog$
</ol>
<BR>
<BR>
<BR>

