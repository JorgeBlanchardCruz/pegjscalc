<script type="text/javascript" src="path-to-mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
</script>
<script type="text/javascript"
  src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<br>
Recuerde que un PEG $G$ es una cuaterna $G =(\Sigma,V,P,S)$.
<ol>
  <li>$\Sigma$ es el conjunto de terminales. 
  <li>$V$ es un conjunto (disjunto de $\Sigma$) que se denomina conjunto de 
      <i>símbolos no terminales</i>,
      <i>variables sintácticas</i> o <i>categorías gramáticales</i>,
  <li>$P$ es un conjunto de pares de $V \times (V \cup \Sigma )^*$. En vez de escribir
  un par usando la notación $(A, \alpha) \in P$ se escribe $A \leftarrow \alpha$.
  Un elemento de $P$ se denomina <i>regla de análisis</i>. 
  <li>Por último, $S$ es un símbolo del conjunto
  $V$ que se denomina <i>expresión de arranque</i>.
</ol>
<ol>
  <li> $\Sigma = \{ ID, NUM, CONST, VAR, PROCEDURE, CALL, BEGIN, END, IF, THEN, ELSE, WHILE, DO, ODD, ".", ",", =, ;,  =, ==, !=, <, >, +, -, *, /, (, ) \}$,
  <li> $V = \{ program, block, cons, var, proc, assin, arg, st, cond, exp, term, factor\} \cup$ <br />
  $\{COMPARISON, ASSIGN, ADD, MUL, PTO, PTO \_ COMA, COMA, LEFTPAR, RIGHTPAR, VAR\} \cup$ <br />
  $\{CONST, PROCEDURE, IF, THEN, ELSE, CALL, BEGIN, END, WHILE, DO, ODD, ID, NUMBER\}$
  <li> Reglas de Análisis:
  <ol>
<pre>

program = (block) + PTO 

block = CONST (cons) + PTO_COMA
        / VAR (var) + PTO_COMA
        / (proc)* (st)

cons = CONST (assin) (COMA (assin))* PTO_COMA

var = VAR ID (COMA ID)* PTO_COMA
           
proc = PROCEDURE ID (arg)? PTO_COMA (block) PTO_COMA

assin = ID ASSIGN (exp)
           
arg = LEFTPAR (exp) (COMA exp)* RIGHTPAR
       
st = CALL ID (arg)?
    / ID ASSIGN 
    / IF (cond) THEN (st) ELSE sst)
    / IF (cond) THEN (st)
    / BEGIN (st) (PTO_COMA (st))* END
    / WHILE (cond) DO (st)

cond = ODD (exp)
      / (exp) COMPARISON (exp)
       
exp = (term) (ADD (term)*

term = (factor) (MUL (factor)*

factor = NUMBER
       / ID
       / LEFTPAR (exp) RIGHTPAR

_ = $[ \t\n\r]*

COMPARISON = _ ('==' / [#|<|<=|>|>=]) _ 
ASSIGN = _ '=' _ 
ADD = _ [+-] _ 
MUL = _ [*/] _
PTO = _"."_
PTO_COMA = _";"_
COMA = _","_
LEFTPAR = _"("_
RIGHTPAR = _")"_
VAR = _"var"_
CONST = _"const"_
PROCEDURE= _"procedure"_
IF = _ "if" _
THEN = _ "then" _
ELSE = _ "else" _
CALL = _ "call" _
BEGIN = _ "begin" _
END = _ "end" _
WHILE = _ "while" _
DO = _ "do" _
ODD = _ "odd" _
ID = _ id:$([a-zA-Z_][a-zA-Z_0-9]*) _
NUMBER = _ digits:$[0-9]+ _

</pre>
  </ol>
  <li> Expresión de arranque: $program$
</ol>
<BR>
<BR>
<BR>

